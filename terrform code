provider "aws" {
  region = "ap-south-1"
  profile = "gyanvi999"
}


// Creating Key

resource "tls_private_key" "tls_key" {
 algorithm = "RSA"
}



//Generating Key-Value Pair

resource "aws_key_pair" "generated_key" {
 key_name = "gkey1"
 public_key = "${tls_private_key.tls_key.public_key_openssh}"

depends_on = [
  tls_private_key.tls_key
 ]
}


// Saving Private key PEM file

resource "local_file" "key_file" {
 content = "${tls_private_key.tls_key.private_key_pem}"
 filename = "gkey1.pem"

depends_on = [
 tls_private_key.tls_key,
 aws_key_pair.generated_key
]
}


//Creating Security Group

resource "aws_security_group" "firstgroup" {
   name = "first_security_gp"

  ingress {
    description = "SSH Port"
    protocol  = "tcp"
    from_port = 22
    to_port   = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    description = "HTTP Port"
    protocol  = "tcp"
    from_port = 80
    to_port   = 80
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
  Name = "Task1sec"
 }
}


//Creating instance with above created key and securtiy group

resource "aws_instance" "Task1instance" {
 ami = "ami-0447a12f28fddb066"
 instance_type = "t2.micro"
 key_name = "${aws_key_pair.generated_key.key_name}"
 security_groups = ["${aws_security_group.firstgroup.name}"]
 tags = {
  Name = "Task1instance"
 }
}



//Creating new EBS Volume for Task1instance

resource "aws_ebs_volume" "ebs1" {
   availability_zone = aws_instance.Task1instance.availability_zone
   size = 1
  tags = {
      Name = "Task1ebs"
   }
}


// To attach the Volume created

resource "aws_volume_attachment" "ebs_attach" {
   device_name = "/dev/sdh"
   volume_id   = "${aws_ebs_volume.ebs1.id}"
   instance_id = "${aws_instance.Task1instance.id}"
   force_detach = true
}



// For Output
output "myos_ip" {
  value = aws_instance.Task1instance.public_ip
}

resource "null_resource" "nullremote" {
depends_on = [
     aws_volume_attachment.ebs_attach,
 aws_security_group.firstgroup,
    aws_key_pair.generated_key 
  ]
connection{
    type = "ssh"
    user = "ec2-user"
    private_key = file("D:/SOFTWARE/Terraform/test/task1/gkey1.pem")
    host = aws_instance.Task1instance.public_ip
}



// Volume partition, format and mounting 



provisioner "remote-exec"{
    inline = [
      "sudo yum install httpd  php git -y",
       "sudo service httpd start",
      "sudo chkconfig httpd on", 
       "sudo mkfs.ext4  /dev/xvdh",
       "sudo mount  /dev/xvdh  /var/www/html",
       "sudo rm -rf /var/www/html/*",
"sudo git clone https://github.com/gyanvi123/Cloud_Computing.git /var/www/html/"
       
    ]
  }
}



// Creating S3 bucket
resource "aws_s3_bucket" "gyanvitask1bucket" {
  bucket = "gyanvitask1bucket"
  acl    = "public-read"
  tags = {
  Name = "gyanvitask1bucket"
 }
}

// Allow Public Access
resource "aws_s3_bucket_public_access_block" "S3PublicAccess" {
  bucket = "${aws_s3_bucket.gyanvitask1bucket.id}"
  block_public_acls = false
  block_public_policy = false
  restrict_public_buckets = false
}



//Putting Objects in S3 Bucket

resource "aws_s3_bucket_object" "s3_object" {
  bucket = "${aws_s3_bucket.gyanvitask1bucket.bucket}"
  key    = "myyyyy.jpg"
  source = "D:/image/myyyyy.jpg"
  acl    = "public-read"
}


//Creating Cloudfront to access images from S3

locals {
 s3_origin_id = aws_s3_bucket.gyanvitask1bucket.id
}

//Creating Origin Access Identity for CloudFront

resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
 comment = "gyanvitask1bucket"
}
resource "aws_cloudfront_distribution" "Task1CF" {
origin {
 domain_name = "${aws_s3_bucket.gyanvitask1bucket.bucket_regional_domain_name}"
 origin_id = "${local.s3_origin_id}"
 s3_origin_config {
  origin_access_identity = "${aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path}"
 }
}
enabled = true
 is_ipv6_enabled = true
 comment = "accessforTask1"
 default_cache_behavior {
  allowed_methods = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
  cached_methods = ["GET", "HEAD"]
  target_origin_id = "${local.s3_origin_id}"
  forwarded_values {
   query_string = false
   cookies {
    forward = "none"
   }
  }
  viewer_protocol_policy = "allow-all"
  min_ttl = 0
  default_ttl = 3600
  max_ttl = 86400
 }


// Cache behavior with precedence 0


ordered_cache_behavior {
 path_pattern = "/content/immutable/*"
 allowed_methods = ["GET", "HEAD", "OPTIONS"]
 cached_methods = ["GET", "HEAD", "OPTIONS"]
 target_origin_id = "${local.s3_origin_id}"
 forwarded_values {
  query_string = false
  headers = ["Origin"]
  cookies {
   forward = "none"
  }
 }
min_ttl = 0
 default_ttl = 86400
 max_ttl = 31536000
 compress = true
 viewer_protocol_policy = "redirect-to-https"
}


// Cache behavior with precedence 1

ordered_cache_behavior {
 path_pattern = "/content/*"
 allowed_methods = ["GET", "HEAD", "OPTIONS"]
 cached_methods = ["GET", "HEAD"]
 target_origin_id = "${local.s3_origin_id}"
 forwarded_values {
  query_string = false
  cookies {
   forward = "none"
  }
 }
min_ttl = 0
default_ttl = 3600
max_ttl = 86400
compress = true
viewer_protocol_policy = "redirect-to-https"
}
price_class = "PriceClass_200"
restrictions {
geo_restriction {
restriction_type = "whitelist"
locations = ["IN"]
}
}
tags = {
Name="Task1CFDistribution"
Environment = "production"
}
viewer_certificate {
cloudfront_default_certificate = true
}
retain_on_delete = true
depends_on=[
 aws_s3_bucket.gyanvitask1bucket
]
}


// Adding cloud front URL .

resource "null_resource" "CodeChange"  {
depends_on = [
    aws_cloudfront_distribution.Task1CF,
  ]
connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.tls_key.private_key_pem
    host     = aws_instance.Task1instance.public_ip
  }
  provisioner "remote-exec" {
    inline = [
	"echo '<img src='https://${aws_cloudfront_distribution.Task1CF.domain_name}/myyyyy.jpg' width='1280' height='1800'>' | sudo tee -a /var/www/html/myyyyy.html"
    ]
  }
}

// Finally opening the website through chrome browser.

resource "null_resource" "ChromeOpen"  {


	provisioner "local-exec" {
	    command = "chrome  ${aws_instance.Task1instance.public_ip}/myyyyy.html"
  	}
}


